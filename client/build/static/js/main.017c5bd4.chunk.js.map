{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","audio","video","then","current","srcObject","on","id","data","from","signal","style","textAlign","className","playsInline","muted","ref","autoPlay","width","placeholder","value","onChange","e","target","onClick","emit","destroy","peer","Peer","initiator","trickle","signalData","userToCall","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAAe,I,qCCMTA,EAASC,IAAGC,QAAQ,0CAoJXC,MAjJf,WAEE,MAAoBC,mBAAS,IAA7B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAwCR,qBAAxC,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAAgCZ,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAAkCd,oBAAS,GAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KACA,EAAwBhB,mBAAS,IAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KAGMC,EAAUC,mBACVC,EAAYD,mBACZE,EAAgBF,mBAmFtB,OAjFAG,qBAAU,WACRC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAAQC,MAAK,SAAC1B,GACtEC,EAAUD,GACVgB,EAAQW,QAAQC,UAAY5B,KAG9BP,EAAOoC,GAAG,MAAM,SAACC,GACf/B,EAAM+B,MAGRrC,EAAOoC,GAAG,YAAY,SAACE,GACrB5B,GAAiB,GACjBE,EAAU0B,EAAKC,MACfjB,EAAQgB,EAAKjB,MACbP,EAAgBwB,EAAKE,aAEtB,IAqDHxC,EAAOoC,GAAG,iBAAiB,WACzBhB,GAAa,MAYb,qCACE,oBAAIqB,MAAO,CAAEC,UAAW,UAAxB,oBACA,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,QAAf,SACGpC,GAAU,uBAAQqC,aAAW,EAACC,OAAK,EAACC,IAAKvB,EAASwB,UAAQ,EAACN,MAAO,CAAEO,MAAO,aAE9E,qBAAKL,UAAU,QAAf,SACG5B,IAAiBI,EAChB,uBAAO4B,UAAQ,EAACH,aAAW,EAACE,IAAKrB,EAAWgB,MAAO,CAAEO,MAAO,WAC5D,UAKN,0BAAUC,YAAY,aAAaC,MAAOjC,EAAUkC,SAAU,SAACC,GAAQlC,EAAYkC,EAAEC,OAAOH,UAC5F,0BAAUD,YAAY,UAAUC,MAAO7C,IACvC,0BAAU4C,YAAY,OAAOC,MAAO7B,EAAM8B,SAAU,SAACC,GAAQ9B,EAAQ8B,EAAEC,OAAOH,UAI9E,8BACGnC,IAAiBI,EAChB,wBAAQmC,QAAS,WA/BzBtD,EAAOuD,KAAK,gBAAiBtC,GAC7BG,GAAa,GACbM,EAAcQ,QAAQsB,WA6Bd,kBAGA,wBAAQF,QAAS,YA1FV,SAACjB,GAChB,IAAMoB,EAAO,IAAIC,IAAK,CACpBC,WAAW,EACXC,SAAS,EACTrD,OAAQA,IAGVkD,EAAKrB,GAAG,UAAU,SAACE,GACjBtC,EAAOuD,KAAK,WAAY,CACtBM,WAAYvB,EACZwB,WAAYzB,EACZE,KAAMlC,EACNgB,KAAMA,OAKVoC,EAAKrB,GAAG,UAAU,SAAC7B,GACjBkB,EAAUS,QAAQC,UAAY5B,KAGhCP,EAAOoC,GAAG,gBAAgB,SAACI,GACzBxB,GAAgB,GAChByC,EAAKjB,OAAOA,MAGdd,EAAcQ,QAAUuB,EAgESM,CAAS9C,IAAlC,oBAKJ,8BACGR,IAAkBM,EAEf,gCACE,+BAAKM,EAAL,sBACA,wBAAQiC,QAtEH,WACjBtC,GAAgB,GAChB,IAAMyC,EAAO,IAAIC,IAAK,CACpBC,WAAW,EACXC,SAAS,EACTrD,OAAQA,IAGVkD,EAAKrB,GAAG,UAAU,SAACE,GACjBtC,EAAOuD,KAAK,aAAc,CAAEf,OAAQF,EAAM0B,GAAIrD,OAGhD8C,EAAKrB,GAAG,UAAU,SAAC7B,GACjBkB,EAAUS,QAAQC,UAAY5B,KAGhCkD,EAAKjB,OAAO3B,GACZa,EAAcQ,QAAUuB,GAqDZ,uBAEA,cCtIDQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.017c5bd4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\n\nconst socket = io.connect(\"https://ashreactvideoapp.herokuapp.com\");\n\n\nfunction App() {\n\n  const [me, setMe] = useState(\"\");\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [idToCall, setIdToCall] = useState(\"\");\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState(\"\");\n\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then((stream) => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n\n    socket.on(\"me\", (id) => {\n      setMe(id);\n    });\n\n    socket.on(\"callUser\", (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  const callUser = (id) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n\n    peer.on(\"signal\", (data) => {\n      socket.emit(\"callUser\", {\n        signalData: data,\n        userToCall: id,\n        from: me,\n        name: name\n      });\n    });\n\n\n    peer.on(\"stream\", (stream) => {\n      userVideo.current.srcObject = stream;\n    });\n\n    socket.on(\"callAccepted\", (signal) => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n\n  }\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n\n    peer.on(\"signal\", (data) => {\n      socket.emit(\"answerCall\", { signal: data, to: caller });\n    });\n\n    peer.on(\"stream\", (stream) => {\n      userVideo.current.srcObject = stream;\n    });\n\n    peer.signal(callerSignal);\n    connectionRef.current = peer;\n\n  }\n\n  socket.on(\"endCallByUser\", () => {\n    setCallEnded(true);\n  })\n\n  const leaveCall = () => {\n    socket.emit(\"endCallByUser\", idToCall);\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  }\n\n\n\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>AshApp</h1>\n      <div className=\"container\">\n        <div className=\"video-container\">\n          <div className=\"video\">\n            {stream && < video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\n          </div>\n          <div className=\"video\">\n            {callAccepted && !callEnded ?\n              <video autoPlay playsInline ref={userVideo} style={{ width: \"300px\" }} /> :\n              null\n            }\n          </div>\n        </div>\n\n        <textarea placeholder=\"Id to call\" value={idToCall} onChange={(e) => { setIdToCall(e.target.value) }} />\n        <textarea placeholder=\"Your Id\" value={me} />\n        <textarea placeholder=\"Name\" value={name} onChange={(e) => { setName(e.target.value) }} />\n\n\n\n        <div>\n          {callAccepted && !callEnded ? (\n            <button onClick={() => { leaveCall(idToCall) }}> End</button>\n\n          ) : (\n            <button onClick={() => { callUser(idToCall) }}>Call</button>\n          )}\n        </div>\n\n\n        <div>\n          {receivingCall && !callAccepted ?\n            (\n              <div>\n                <h1>{name} is calling.....</h1>\n                <button onClick={answerCall}>Answer</button>\n              </div>\n            ) : null\n          }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}